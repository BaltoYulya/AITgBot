import os
import time
import json
import dotenv
import openai
import httpx
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import List, Optional, Dict

dotenv.load_dotenv()
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = openai.OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
    timeout=30.0
)
app = FastAPI()


class ChatMessage(BaseModel):
    role: str
    content: str


class PromptInput(BaseModel):
    messages: List[ChatMessage]
    system_prompt: Optional[str] = None
    model: str = "gpt-4.1-nano"


def measure_openai_rtt() -> float:
    """RTT –¥–æ OpenAI API –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"""
    try:
        with httpx.Client(http2=True, timeout=10.0) as http_client:
            start = time.time()
            http_client.head("https://api.openai.com/v1/models")
            return round((time.time() - start) * 1000, 2)
    except Exception:
        return -1


@app.post("/ask")
async def ask_user(input: PromptInput):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ system prompt
    format_instruction = """
        –í–ê–ñ–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –î–û–õ–ñ–ï–ù –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
        {
        "userResponse": "—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
        "data": {
            "client_name": null –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞,
            "client_phone": null –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞,
            "city": null –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞,
            "region": null –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞,
            "problem_category": null –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞,
            "problem_description": null –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞,
            "consultation_status": null –∏–ª–∏ "–¥–∞"/"–Ω–µ—Ç"/"–ø–æ–∑–∂–µ",
            "themes": [],
            "micro_themes": [],
            "additional": {
            "amount": null,
            "key_dates": [],
            "documents": null,
            "urgency": null,
            "emotional_state": null,
            "organization": null,
            "desired_result": null
            }
        },
        "status": "IN_PROCESS"
        }
        """
    system_prompt = (input.system_prompt or "") + "\n\n" + format_instruction

    user_texts = [m.content for m in input.messages if m.role == "user"]
    print(f"\nüü° –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {user_texts}")
    rtt = measure_openai_rtt()
    print(f"‚è≥ RTT (ping) –¥–æ OpenAI: {rtt} –º—Å")

    t0 = time.time()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        completion = client.chat.completions.create(
            model=input.model,
            messages=[
                {"role": "system", "content": system_prompt.strip()},
                *[{"role": m.role, "content": m.content} for m in input.messages],
                {"role": "system", "content": "–û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –æ–ø–∏—Å–∞–Ω–Ω–æ–º –≤—ã—à–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON."}
            ],
            stream=False,
        )
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

    full_reply: str = completion.choices[0].message.content.strip()
    print(f"üì§ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n{full_reply}")

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –≤ –æ—Ç–≤–µ—Ç–µ
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
        try:
            result_data = json.loads(full_reply)
            if isinstance(result_data, dict) and "userResponse" in result_data:
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ –ø–æ–ª–Ω—ã–π JSON –æ—Ç–≤–µ—Ç")
                return JSONResponse(content=result_data, headers={"X-RTT-MS": str(rtt), "X-Total-Time": str(round(time.time() - t0, 2))})
        except json.JSONDecodeError:
            pass

        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ
        start_idx = full_reply.find('{')
        end_idx = full_reply.rfind('}')
        
        if start_idx != -1 and end_idx != -1 and end_idx > start_idx:
            json_str = full_reply[start_idx:end_idx + 1]
            try:
                result_data = json.loads(json_str)
                if isinstance(result_data, dict) and "userResponse" in result_data:
                    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ–∫–ª–∏ JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞")
                    return JSONResponse(content=result_data, headers={"X-RTT-MS": str(rtt), "X-Total-Time": str(round(time.time() - t0, 2))})
            except json.JSONDecodeError:
                pass

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        default_response = {
            "userResponse": full_reply,
            "data": {
                "client_name": None,
                "client_phone": None,
                "city": None,
                "region": None,
                "problem_category": None,
                "problem_description": None,
                "consultation_status": None,
                "themes": [],
                "micro_themes": [],
                "additional": {
                    "amount": None,
                    "key_dates": [],
                    "documents": None,
                    "urgency": None,
                    "emotional_state": None,
                    "organization": None,
                    "desired_result": None
                }
            },
            "status": "IN_PROCESS"
        }
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return JSONResponse(content=default_response, headers={"X-RTT-MS": str(rtt), "X-Total-Time": str(round(time.time() - t0, 2))})

    except Exception as e:
        error_response = {
            "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞",
            "raw_response": full_reply,
            "details": str(e),
            "status": 500
        }
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return JSONResponse(status_code=500, content=error_response) 