function leadManager(context) {
    this.$ = context;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    if (!this.$.session.lead) {
        this.lead = {}
        this.$.session.lead = this.lead;
    } else {
        // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        this.lead = this.$.session.lead;
    }
}


leadManager.prototype.createLead = function (param) {
    var param = {
        "user_channel": param.channel, // telegram TELEGRAM1, whatsapp WHATSAPP1
        "nameOpenAI": param.nameOpenAI,
        "id_telegram": param.id_telegram,
        "userName": param.userName,
        "userPhone": param.userPhone,
        "userThemes": param.userThemes,
        "userMicroThemes": param.userMicroThemes,
        "userUrgencyLevels": param.userUrgencyLevels
    };
    var newLead = {
        fields: {
            TITLE: "JAICP",
            NAME: param.userName,
            PHONE: [
                {
                    VALUE: param.userPhone,
                    VALUE_TYPE: "MOBILE"
                }
            ],
            SOURCE_ID: param.user_channel, // WHATSAPP1, TELEGRAM1
            UF_CRM_1753724408: param.id_telegram, // ID Telegram
            UF_CRM_1753768818: param.userName, // TG USERNAME
            UF_CRM_1750364723: param.userThemes, // –¢–µ–º–∞—Ç–∏–∫–∞
            UF_CRM_1750364784: param.userMicroThemes, // –ú–∏–∫—Ä–æ—Ç–µ–º–∞—Ç–∏–∫–∞
            UF_CRM_1753211933: param.userUrgencyLevels // –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        }

    }

    this.lead = newLead;
    this.$.session.lead = newLead;

    log('[+++] üöÄüöÄüöÄ Create Lead = ' + toPrettyString(newLead));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ –≤ –ë–∏—Ç—Ä–∏–∫—Å
    return this.sendToBitrix(newLead);
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏–¥ –≤ –ë–∏—Ç—Ä–∏–∫—Å24
 * @param {Object} leadData - –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
 * @returns {Object} –æ—Ç–≤–µ—Ç –æ—Ç API
 */
leadManager.prototype.sendToBitrix = function (leadData) {
    try {
        var param = getRequestParam();
        var url = replaceTokenInUrl(param.url.createLead, param.token.bitrix);

        log('[+++] üöÄüöÄüöÄ Create Lead URL = ' + url);
        log('[+++] üöÄüöÄüöÄ Create Lead Body = ' + toPrettyString(leadData));

        var response = $http.post(url, {
            headers: {
                'Content-Type': 'application/json'
            },
            body: leadData
        });

        log('[+++] üöÄüöÄüöÄ Create Lead Response = ' + toPrettyString(response));

        return response;
    } catch (error) {
        log('[+++] Error in sendToBitrix = ' + toPrettyString(error));
        return {
            error: error.message,
            status: error.status || 500
        };
    }
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24
 * @param {string|number} leadId - ID –ª–∏–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param {Object} updateData - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {Object} –æ—Ç–≤–µ—Ç –æ—Ç API
 */
leadManager.prototype.updateLead = function (leadId, updateData) {
    try {
        log('[+++] üöÄ –ù–∞—á–∏–Ω–∞–µ–º updateLead –¥–ª—è ID: ' + leadId);
        
        var param = getRequestParam();
        var url = replaceTokenInUrl(param.url.updateLead, param.token.bitrix);
        log('[+++] üöÄ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ URL: ' + url);

        log('[+++] üöÄ –§–æ—Ä–º–∏—Ä—É–µ–º requestBody...');
        var requestBody = {
            id: leadId,
            fields: updateData
        };
        log('[+++] üöÄ requestBody —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

        log('[+++] üîÑüîÑüîÑ Update Lead URL = ' + url);
        log('[+++] üîÑüîÑüîÑ Update Lead ID = ' + leadId);
        log('[+++] üîÑüîÑüîÑ Update Lead Body = ' + toPrettyString(requestBody));
        log('[+++] üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –í –ë–ò–¢–†–ò–ö–°: ' + JSON.stringify(requestBody));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (!url || !leadId || !updateData) {
            log('[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:');
            log('[ERROR] url = ' + url);
            log('[ERROR] leadId = ' + leadId);
            log('[ERROR] updateData = ' + toPrettyString(updateData));
            throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞');
        }

        var response = $http.post(url, {
            headers: {
                'Content-Type': 'application/json'
            },
            body: requestBody,
            timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });

        log('[+++] üîÑüîÑüîÑ Update Lead Response = ' + toPrettyString(response));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if (!response || !response.isOk) {
            log('[ERROR] –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix:');
            log('[ERROR] response = ' + toPrettyString(response));
            throw new Error('–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix: ' + (response ? response.error : '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (!response.data || !response.data.result) {
            log('[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bitrix:');
            log('[ERROR] response.data = ' + toPrettyString(response.data));
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bitrix');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        if (this.lead && this.lead.fields) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for (var key in updateData) {
                this.lead.fields[key] = updateData[key];
            }
            this.$.session.lead = this.lead;
            log('[+++] ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏');
        }

        log('[+++] ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞ –≤ Bitrix');
        return response;

    } catch (error) {
        log('[+++] ‚ùå Error in updateLead:');
        log('[+++] ‚ùå error.message = ' + error.message);
        log('[+++] ‚ùå error.name = ' + error.name);
        log('[+++] ‚ùå error.stack = ' + error.stack);
        log('[+++] ‚ùå Full error object = ' + toPrettyString(error));
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è –ª–∏–¥–∞ (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
 * @param {string|number} leadId - ID –ª–∏–¥–∞
 * @param {Object} fields - –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {Object} –æ—Ç–≤–µ—Ç –æ—Ç API
 */
leadManager.prototype.updateLeadFields = function (bitrix_id, leadData) {
    try {
        log('[+++] üîÑüîÑüîÑ –ª–∏–¥ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª–∏ –≤ –∫–ª–∞—Å—Å = ' + toPrettyString(leadData));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!bitrix_id || !leadData) {
            log('[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è updateLeadFields:');
            log('[ERROR] bitrix_id = ' + bitrix_id);
            log('[ERROR] leadData = ' + toPrettyString(leadData));
            throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è updateLeadFields');
        }

        var updateData = {};

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        log('[+++] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è:');
        log('[+++] üîç leadData.userName = ' + leadData.userName);
        log('[+++] üîç leadData.userPhone = ' + leadData.userPhone);
        log('[+++] üîç leadData.userThemes = ' + leadData.userThemes);
        log('[+++] üîç leadData.userMicroThemes = ' + leadData.userMicroThemes);
        log('[+++] üîç leadData.userUrgencyLevels = ' + leadData.userUrgencyLevels);
        log('[+++] üîç leadData.STATUS_ID = ' + leadData.STATUS_ID);
        
        if (leadData.userName) {
            updateData.NAME = leadData.userName;
            log('[+++] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ NAME: ' + leadData.userName);
        }
        if (leadData.userPhone) {
            updateData.PHONE = [{
                VALUE: leadData.userPhone,
                VALUE_TYPE: "MOBILE"
            }];
            log('[+++] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ PHONE: ' + leadData.userPhone);
        }
        if (leadData.userThemes) {
            updateData.UF_CRM_1750364723 = leadData.userThemes;
            log('[+++] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ UF_CRM_1750364723 (themes): ' + leadData.userThemes);
        }
        if (leadData.userMicroThemes) {
            updateData.UF_CRM_1750364784 = leadData.userMicroThemes;
            log('[+++] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ UF_CRM_1750364784 (micro_themes): ' + leadData.userMicroThemes);
        }
        if (leadData.userUrgencyLevels) {
            updateData.UF_CRM_1753211933 = leadData.userUrgencyLevels;
            log('[+++] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ UF_CRM_1753211933 (urgency): ' + leadData.userUrgencyLevels);
        }
        
        if (leadData.STATUS_ID) {
            updateData.STATUS_ID = leadData.STATUS_ID;
            log('[+++] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ STATUS_ID: ' + leadData.STATUS_ID);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–æ–ª—è Bitrix (–Ω–∞–ø—Ä–∏–º–µ—Ä, UF_CRM_*)
        for (var key in leadData) {
            if (key.startsWith('UF_CRM_')) {
                updateData[key] = leadData[key];
                log('[+++] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä—è–º–æ–µ –ø–æ–ª–µ ' + key + ': ' + leadData[key]);
            }
        }

        log('[+++] üîÑüîÑüîÑ Updating fields = ' + toPrettyString(updateData));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
        if (Object.keys(updateData).length === 0) {
            log('[WARNING] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Bitrix');
            return null;
        }

        return this.updateLead(bitrix_id, updateData);
    } catch (error) {
        log('[ERROR] –û—à–∏–±–∫–∞ –≤ updateLeadFields:');
        log('[ERROR] error.message = ' + error.message);
        log('[ERROR] error.stack = ' + error.stack);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
};