require: requirements.sc

init:
\$global.\$ = {
**noSuchProperty**: function(property) {
return \$jsapi.context()\[property];
}
};

```
bind("preMatch", function($context) {
    var $ = $context;
    $.session.AUTH = $.injector.auth;
    $.session.API = $.injector.api;
});
```

theme: /

```
state: StartFirst

    q!: $regex<test>
    q!: test
    q!: 1
    a: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!. –í–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å?
    script:
        try {
            log('[+++] üß†üß†üß† request = ' + toPrettyString($request));

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userChannel = $request.rawRequest.chatType; // telegram –∏–ª–∏ whatsapp

            if (userChannel == "telegram") {
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å–∞
                var id_telegram = $request.userFrom.id;
                $session.id_telegram = id_telegram;
                var username = ($request.rawRequest &&
                                $request.rawRequest.contact &&
                                $request.rawRequest.contact.username &&
                                $request.rawRequest.contact.username.trim() !== "")
                               ? $request.rawRequest.contact.username
                               : "";

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ
                var result = gerUserByBitrix(id_telegram);

                if (_.isEmpty(result)) {
                    var leadManagerInstance = new leadManager($context);
                    leadManagerInstance.createLead({
                        channel: "TELEGRAM1",
                        id_telegram: id_telegram,
                        userName: username
                    });
                } else {
                    // TODO: –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–∏–¥–∞
                }

            } else if (userChannel == "whatsapp") {
                // TODO: –ª–æ–≥–∏–∫–∞ –¥–ª—è WhatsApp
            } else {
                // TODO: –¥—Ä—É–≥–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º–∞—Ç–∏–∫–∏
            var themes = getBitrixUserFields();
            var themes_text = extractThemesFromBitrix(themes);
            $session.themes_text = themes_text;

            // –ù–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
            $session.messages = [
                { role: "assistant", content: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!. –í–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å?" }
            ];

        } catch (e) {
            $reactions.answer(toPrettyString(e.stack));
        }

state: NoMatch
    event!: noMatch
    script:
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        if (!$session.messages) {
            $session.messages = [];
        }
        $session.messages.push({ role: "user", content: $request.query });

        // –¢–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º—Ç–∞
        var themes_data = $session.themes_text ? JSON.stringify($session.themes_text) : "";
        var full_prompt = prompt.prompt_tg
            + "\n\nüìã –î–û–°–¢–£–ü–ù–´–ï –¢–ï–ú–ê–¢–ò–ö–ò –ò –ú–ò–ö–†–û–¢–ï–ú–ê–¢–ò–ö–ò:\n" + themes_data
            + "\n\n–°—Ç–∞—Ç—É—Å—ã:\n" + prompt.status;

        var maxRetries = 5;
        var currentRetry = 0;
        while (currentRetry < maxRetries) {
            try {
                var tempRes = askBrain(full_prompt, $session.messages);
                if (!tempRes || tempRes.error) {
                    currentRetry++;
                    log('[ERROR] askBrain –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–ø—ã—Ç–∫–∞ ' + currentRetry);
                    if (currentRetry >= maxRetries) {
                        $reactions.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                        return;
                    }
                    // –ó–∞–¥–µ—Ä–∂–∫–∞
                    var start = Date.now(); while (Date.now() - start < 5000) {}
                    continue;
                }

                var userResponse = tempRes.userResponse;
                var data = tempRes.data;
                var status = tempRes.status;

                $reactions.answer(userResponse);
                $session.messages.push({ role: "assistant", content: userResponse });

                var result = gerUserByBitrix($session.id_telegram);
                if (result && result.length > 0) {
                    var bitrix_id = result[0].ID;
                    var leadManagerInstance = new leadManager($context);

                    if (status) {
                        leadManagerInstance.updateLeadFields(bitrix_id, { STATUS_ID: status });
                    }
                    if (data) {
                        var bitrixFields = {};
                        if (data.themes && data.themes.length) bitrixFields.userThemes = String(data.themes[0].id);
                        if (data.micro_themes && data.micro_themes.length) bitrixFields.userMicroThemes = String(data.micro_themes[0].id);
                        if (data.urgencyLevels && data.urgencyLevels.length) {
                            bitrixFields.userUrgencyLevels = String(data.urgencyLevels[0].id);
                        }
                        if (data.client_name) bitrixFields.userName = data.client_name;
                        if (data.client_phone) bitrixFields.userPhone = data.client_phone;

                        if (Object.keys(bitrixFields).length) {
                            try {
                                leadManagerInstance.updateLeadFields(bitrix_id, bitrixFields);
                                var brainRes = askBrain(prompt.promt_get_result, $session.messages);
                                if (brainRes && brainRes.userResponse) {
                                    leadManagerInstance.updateLeadFields(bitrix_id, { UF_CRM_1750364958: brainRes.userResponse });
                                }
                            } catch (bitrixError) {
                                log('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–¥–∞: ' + toPrettyString(bitrixError));
                            }
                        }
                    }
                }

                break;
            } catch (error) {
                currentRetry++;
                if (currentRetry >= maxRetries) { $reactions.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'); return; }
            }
        }

state: Stop
    q!: 2
    script:
        $jsapi.stopSession();
    a: –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.

state: 3
    q!: 3
    script:
        $reactions.answer(JSON.stringify($request));
```
require: requirements.sc

init:
\$global.\$ = {
**noSuchProperty**: function(property) {
return \$jsapi.context()\[property];
}
};

```
bind("preMatch", function($context) {
    var $ = $context;
    $.session.AUTH = $.injector.auth;
    $.session.API = $.injector.api;
});
```

theme: /

```
state: StartFirst

    q!: $regex<test>
    q!: test
    q!: 1
    a: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!. –í–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å?
    script:
        try {
            log('[+++] üß†üß†üß† request = ' + toPrettyString($request));

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userChannel = $request.rawRequest.chatType; // telegram –∏–ª–∏ whatsapp

            if (userChannel == "telegram") {
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å–∞
                var id_telegram = $request.userFrom.id;
                $session.id_telegram = id_telegram;
                var username = ($request.rawRequest &&
                                $request.rawRequest.contact &&
                                $request.rawRequest.contact.username &&
                                $request.rawRequest.contact.username.trim() !== "")
                               ? $request.rawRequest.contact.username
                               : "";

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ
                var result = gerUserByBitrix(id_telegram);

                if (_.isEmpty(result)) {
                    var leadManagerInstance = new leadManager($context);
                    leadManagerInstance.createLead({
                        channel: "TELEGRAM1",
                        id_telegram: id_telegram,
                        userName: username
                    });
                } else {
                    // TODO: –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–∏–¥–∞
                }

            } else if (userChannel == "whatsapp") {
                // TODO: –ª–æ–≥–∏–∫–∞ –¥–ª—è WhatsApp
            } else {
                // TODO: –¥—Ä—É–≥–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º–∞—Ç–∏–∫–∏
            var themes = getBitrixUserFields();
            var themes_text = extractThemesFromBitrix(themes);
            $session.themes_text = themes_text;

            // –ù–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
            $session.messages = [
                { role: "assistant", content: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!. –í–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å?" }
            ];

        } catch (e) {
            $reactions.answer(toPrettyString(e.stack));
        }

state: NoMatch
    event!: noMatch
    script:
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        if (!$session.messages) {
            $session.messages = [];
        }
        $session.messages.push({ role: "user", content: $request.query });

        // –¢–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º—Ç–∞
        var themes_data = $session.themes_text ? JSON.stringify($session.themes_text) : "";
        var full_prompt = prompt.prompt_tg
            + "\n\nüìã –î–û–°–¢–£–ü–ù–´–ï –¢–ï–ú–ê–¢–ò–ö–ò –ò –ú–ò–ö–†–û–¢–ï–ú–ê–¢–ò–ö–ò:\n" + themes_data
            + "\n\n–°—Ç–∞—Ç—É—Å—ã:\n" + prompt.status;

        var maxRetries = 5;
        var currentRetry = 0;
        while (currentRetry < maxRetries) {
            try {
                var tempRes = askBrain(full_prompt, $session.messages);
                if (!tempRes || tempRes.error) {
                    currentRetry++;
                    log('[ERROR] askBrain –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–ø—ã—Ç–∫–∞ ' + currentRetry);
                    if (currentRetry >= maxRetries) {
                        $reactions.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                        return;
                    }
                    // –ó–∞–¥–µ—Ä–∂–∫–∞
                    var start = Date.now(); while (Date.now() - start < 5000) {}
                    continue;
                }

                var userResponse = tempRes.userResponse;
                var data = tempRes.data;
                var status = tempRes.status;

                $reactions.answer(userResponse);
                $session.messages.push({ role: "assistant", content: userResponse });

                var result = gerUserByBitrix($session.id_telegram);
                if (result && result.length > 0) {
                    var bitrix_id = result[0].ID;
                    var leadManagerInstance = new leadManager($context);

                    if (status) {
                        leadManagerInstance.updateLeadFields(bitrix_id, { STATUS_ID: status });
                    }
                    if (data) {
                        var bitrixFields = {};
                        if (data.themes && data.themes.length) bitrixFields.userThemes = String(data.themes[0].id);
                        if (data.micro_themes && data.micro_themes.length) bitrixFields.userMicroThemes = String(data.micro_themes[0].id);
                        if (data.urgencyLevels && data.urgencyLevels.length) {
                            bitrixFields.userUrgencyLevels = String(data.urgencyLevels[0].id);
                        }
                        if (data.client_name) bitrixFields.userName = data.client_name;
                        if (data.client_phone) bitrixFields.userPhone = data.client_phone;

                        if (Object.keys(bitrixFields).length) {
                            try {
                                leadManagerInstance.updateLeadFields(bitrix_id, bitrixFields);
                                var brainRes = askBrain(prompt.promt_get_result, $session.messages);
                                if (brainRes && brainRes.userResponse) {
                                    leadManagerInstance.updateLeadFields(bitrix_id, { UF_CRM_1750364958: brainRes.userResponse });
                                }
                            } catch (bitrixError) {
                                log('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–¥–∞: ' + toPrettyString(bitrixError));
                            }
                        }
                    }
                }

                break;
            } catch (error) {
                currentRetry++;
                if (currentRetry >= maxRetries) { $reactions.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'); return; }
            }
        }

state: Stop
    q!: 2
    script:
        $jsapi.stopSession();
    a: –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.

state: 3
    q!: 3
    script:
        $reactions.answer(JSON.stringify($request));
```
