require: requirements.sc

init:
    $global.$ = {
        __noSuchProperty__: function(property) {
            return $jsapi.context()[property];
        }
    };

    bind("preMatch", function($context) {
        var $ = $context;
        $.session.AUTH = $.injector.auth;
        $.session.API = $.injector.api;
    });

theme: /

    state: StartFirst

        q!: $regex<test>
        q!: test
        q!: 1
        a: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!. –í–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å?
        script:
            try {
                log('[+++] üß†üß†üß† request = ' + toPrettyString($request));

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var userChannel = $request.rawRequest.chatType; // telegram –∏–ª–∏ whatsapp

                if (userChannel == "telegram") {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å–∞
                    var id_telegram = $request.userFrom.id;
                    $session.id_telegram = id_telegram;
                    var username = ($request.rawRequest &&
                                    $request.rawRequest.contact &&
                                    $request.rawRequest.contact.username &&
                                    $request.rawRequest.contact.username.trim() !== "")
                                   ? $request.rawRequest.contact.username
                                   : "";

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ
                    var result = gerUserByBitrix(id_telegram);

                    if (_.isEmpty(result)) {
                        var leadManagerInstance = new leadManager($context);
                        leadManagerInstance.createLead({
                            channel: "TELEGRAM1",
                            id_telegram: id_telegram,
                            userName: username
                        });
                    } else {
                        // TODO: –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–∏–¥–∞
                    }

                } else if (userChannel == "whatsapp") {
                    // TODO: –ª–æ–≥–∏–∫–∞ –¥–ª—è WhatsApp
                } else {
                    // TODO: –¥—Ä—É–≥–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                }

                var themes = getBitrixUserFields(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–∞—Ç–∏–∫—É –∏ –º–∏–∫—Ä–æ—Ç–µ–º–∞—Ç–∏–∫—É
                var themes_text = extractThemesFromBitrix(themes);
                $session.themes_text = themes_text;

                $session.messages = [
                    {
                        role: "assistant",
                        content: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!. –í–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å?"
                    }
                ];
            } catch (e) {
                $reactions.answer(toPrettyString(e.stack));
            }

    state: NoMatch
        event!: noMatch
        script:
            var userChannel = $request.rawRequest.chatType; // telegram –∏–ª–∏ whatsapp

            if (userChannel == "telegram") {
                var id_telegram = $request.userFrom.id;
                $session.id_telegram = id_telegram;
                var username = ($request.rawRequest &&
                                $request.rawRequest.contact &&
                                $request.rawRequest.contact.username &&
                                $request.rawRequest.contact.username.trim() !== "")
                               ? $request.rawRequest.contact.username
                               : "";
            }

            // –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
            if (!$session.messages) {
                $session.messages = [];
            }
            $session.messages.push({
                role: "user",
                content: $request.query
            });

            // –¢–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º—Ç–∞
            var themes_data = "";
            if ($session.themes_text) {
                themes_data = JSON.stringify($session.themes_text);
            }

            var full_prompt = prompt.prompt_tg
                + "\n\nüìã –î–û–°–¢–£–ü–ù–´–ï –¢–ï–ú–ê–¢–ò–ö–ò –ò –ú–ò–ö–†–û–¢–ï–ú–ê–¢–ò–ö–ò:\n"
                + themes_data
                + "\n\n–°—Ç–∞—Ç—É—Å—ã:\n"
                + prompt.status;

            var maxRetries = 5;
            var currentRetry = 0;
            var tempRes, userResponse, data, status;

            while (currentRetry < maxRetries) {
                try {
                    tempRes = askBrain(full_prompt, $session.messages);

                    if (!tempRes) {
                        currentRetry++;
                        log('[ERROR] askBrain –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–ø—ã—Ç–∫–∞ ' + currentRetry + ' –∏–∑ ' + maxRetries);
                        if (currentRetry >= maxRetries) {
                            $reactions.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                            return;
                        }
                        log('[DEBUG] –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...');
                        var start = Date.now();
                        while (Date.now() - start < 5000) {}
                        continue;
                    }

                    if (tempRes.error) {
                        currentRetry++;
                        log('[ERROR] askBrain –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –ø–æ–ø—ã—Ç–∫–∞ ' + currentRetry + ' –∏–∑ ' + maxRetries + ': ' + toPrettyString(tempRes));
                        if (currentRetry >= maxRetries) {
                            $reactions.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                            return;
                        }
                        log('[DEBUG] –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...');
                        var start = Date.now();
                        while (Date.now() - start < 5000) {}
                        continue;
                    }

                    if (typeof tempRes === 'object' && tempRes !== null) {
                        if (tempRes.error) {
                            log('[ERROR] –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: ' + toPrettyString(tempRes));
                            $reactions.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
                            return;
                        }
                        userResponse = tempRes.userResponse;
                        data = tempRes.data;
                        status = tempRes.status;
                    } else {
                        log('[ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: ' + toPrettyString(tempRes));
                        userResponse = String(tempRes);
                        data = null;
                        status = null;
                    }

                    log('[DEBUG] üß† openAI = ' + toPrettyString(tempRes));
                    log('[DEBUG] üß† userResponse = ' + toPrettyString(userResponse));
                    log('[DEBUG] üß† data = ' + toPrettyString(data));
                    log('[DEBUG] üß† status = ' + toPrettyString(status));

                    if (userResponse && typeof userResponse === 'string') {
                        $reactions.answer(userResponse);
                    }
                    $session.messages.push({ role: "assistant", content: userResponse });

                    var result = gerUserByBitrix($session.id_telegram);
                    if (result && result.length > 0) {
                        var bitrix_id = result[0].ID;
                        var leadManagerInstance = new leadManager($context);

                        if (status) {
                            leadManagerInstance.updateLeadFields(bitrix_id, { STATUS_ID: status });
                        }

                        if (data) {
                            var bitrixFields = {};
                            if (data.themes && data.themes.length > 0) {
                                bitrixFields.userThemes = String(data.themes[0].id);
                            }
                            if (data.micro_themes && data.micro_themes.length > 0) {
                                bitrixFields.userMicroThemes = String(data.micro_themes[0].id);
                            }
                            if (data.urgencyLevels && data.urgencyLevels.length > 0) {
                                bitrixFields.userUrgencyLevels = String(data.urgencyLevels[0].id);
                            } else if (data.additional && data.additional.urgency) {
                                var urgencyMap = { "–Ω–∏–∑–∫–∞—è": "106", "—Å—Ä–µ–¥–Ω—è—è": "104", "–≤—ã—Å–æ–∫–∞—è": "102" };
                                var urgencyId = urgencyMap[data.additional.urgency.toLowerCase()];
                                if (urgencyId) bitrixFields.userUrgencyLevels = urgencyId;
                            }
                            if (data.client_name) {
                                bitrixFields.userName = data.client_name;
                            }
                            if (data.client_phone) {
                                bitrixFields.userPhone = data.client_phone;
                            }

                            if (Object.keys(bitrixFields).length > 0) {
                                try {
                                    var updateResult = leadManagerInstance.updateLeadFields(bitrix_id, bitrixFields);
                                    log('[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + toPrettyString(updateResult));

                                    var promt_get_result = prompt.promt_get_result;
                                    var brainRes = askBrain(promt_get_result, $session.messages);

                                    if (brainRes && brainRes.userResponse) {
                                        leadManagerInstance.updateLeadFields(bitrix_id, {
                                            UF_CRM_1750364958: brainRes.userResponse
                                        });
                                        log('[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–æ UF_CRM_1750364958: ' + brainRes.userResponse);
                                    } else {
                                        log('[ERROR] –ù–µ—Ç userResponse: ' + toPrettyString(brainRes));
                                    }
                                } catch (bitrixError) {
                                    log('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ' + toPrettyString(bitrixError));
                                }
                            } else {
                                log('[DEBUG] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ');
                            }
                        }
                    } else {
                        log('[ERROR] –õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ');
                    }

                    break;
                } catch (error) {
                    currentRetry++;
                    log('[ERROR] askBrain –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–ø—ã—Ç–∫–∞ ' + currentRetry + ' –∏–∑ ' + maxRetries + ': ' + toPrettyString(error));
                    if (currentRetry >= maxRetries) {
                        $reactions.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                        return;
                    }
                    log('[DEBUG] –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...');
                    var start = Date.now();
                    while (Date.now() - start < 5000) {}
                }
            }

    state: Stop
        q!: 2
        script:
            $jsapi.stopSession();
        a: –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.

    state: 3
        q!: 3
        script:
            $reactions.answer(JSON.stringify($request));
require: requirements.sc

init:
    $global.$ = {
        __noSuchProperty__: function(property) {
            return $jsapi.context()[property];
        }
    };

    bind("preMatch", function($context) {
        var $ = $context;
        $.session.AUTH = $.injector.auth;
        $.session.API = $.injector.api;
    });

theme: /

    state: StartFirst

        q!: $regex<test>
        q!: test
        q!: 1
        a: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!. –í–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å?
        script:
            try {
                log('[+++] üß†üß†üß† request = ' + toPrettyString($request));

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var userChannel = $request.rawRequest.chatType; // telegram –∏–ª–∏ whatsapp

                if (userChannel == "telegram") {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å–∞
                    var id_telegram = $request.userFrom.id;
                    $session.id_telegram = id_telegram;
                    var username = ($request.rawRequest &&
                                    $request.rawRequest.contact &&
                                    $request.rawRequest.contact.username &&
                                    $request.rawRequest.contact.username.trim() !== "")
                                   ? $request.rawRequest.contact.username
                                   : "";

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ
                    var result = gerUserByBitrix(id_telegram);

                    if (_.isEmpty(result)) {
                        var leadManagerInstance = new leadManager($context);
                        leadManagerInstance.createLead({
                            channel: "TELEGRAM1",
                            id_telegram: id_telegram,
                            userName: username
                        });
                    } else {
                        // TODO: –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–∏–¥–∞
                    }

                } else if (userChannel == "whatsapp") {
                    // TODO: –ª–æ–≥–∏–∫–∞ –¥–ª—è WhatsApp
                } else {
                    // TODO: –¥—Ä—É–≥–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                }

                var themes = getBitrixUserFields(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–∞—Ç–∏–∫—É –∏ –º–∏–∫—Ä–æ—Ç–µ–º–∞—Ç–∏–∫—É
                var themes_text = extractThemesFromBitrix(themes);
                $session.themes_text = themes_text;

                $session.messages = [
                    {
                        role: "assistant",
                        content: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!. –í–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å?"
                    }
                ];
            } catch (e) {
                $reactions.answer(toPrettyString(e.stack));
            }

    state: NoMatch
        event!: noMatch
        script:
            var userChannel = $request.rawRequest.chatType; // telegram –∏–ª–∏ whatsapp

            if (userChannel == "telegram") {
                var id_telegram = $request.userFrom.id;
                $session.id_telegram = id_telegram;
                var username = ($request.rawRequest &&
                                $request.rawRequest.contact &&
                                $request.rawRequest.contact.username &&
                                $request.rawRequest.contact.username.trim() !== "")
                               ? $request.rawRequest.contact.username
                               : "";
            }

            // –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
            if (!$session.messages) {
                $session.messages = [];
            }
            $session.messages.push({
                role: "user",
                content: $request.query
            });

            // –¢–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–º—Ç–∞
            var themes_data = "";
            if ($session.themes_text) {
                themes_data = JSON.stringify($session.themes_text);
            }

            var full_prompt = prompt.prompt_tg
                + "\n\nüìã –î–û–°–¢–£–ü–ù–´–ï –¢–ï–ú–ê–¢–ò–ö–ò –ò –ú–ò–ö–†–û–¢–ï–ú–ê–¢–ò–ö–ò:\n"
                + themes_data
                + "\n\n–°—Ç–∞—Ç—É—Å—ã:\n"
                + prompt.status;

            var maxRetries = 5;
            var currentRetry = 0;
            var tempRes, userResponse, data, status;

            while (currentRetry < maxRetries) {
                try {
                    tempRes = askBrain(full_prompt, $session.messages);

                    if (!tempRes) {
                        currentRetry++;
                        log('[ERROR] askBrain –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–ø—ã—Ç–∫–∞ ' + currentRetry + ' –∏–∑ ' + maxRetries);
                        if (currentRetry >= maxRetries) {
                            $reactions.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                            return;
                        }
                        log('[DEBUG] –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...');
                        var start = Date.now();
                        while (Date.now() - start < 5000) {}
                        continue;
                    }

                    if (tempRes.error) {
                        currentRetry++;
                        log('[ERROR] askBrain –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –ø–æ–ø—ã—Ç–∫–∞ ' + currentRetry + ' –∏–∑ ' + maxRetries + ': ' + toPrettyString(tempRes));
                        if (currentRetry >= maxRetries) {
                            $reactions.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                            return;
                        }
                        log('[DEBUG] –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...');
                        var start = Date.now();
                        while (Date.now() - start < 5000) {}
                        continue;
                    }

                    if (typeof tempRes === 'object' && tempRes !== null) {
                        if (tempRes.error) {
                            log('[ERROR] –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: ' + toPrettyString(tempRes));
                            $reactions.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
                            return;
                        }
                        userResponse = tempRes.userResponse;
                        data = tempRes.data;
                        status = tempRes.status;
                    } else {
                        log('[ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: ' + toPrettyString(tempRes));
                        userResponse = String(tempRes);
                        data = null;
                        status = null;
                    }

                    log('[DEBUG] üß† openAI = ' + toPrettyString(tempRes));
                    log('[DEBUG] üß† userResponse = ' + toPrettyString(userResponse));
                    log('[DEBUG] üß† data = ' + toPrettyString(data));
                    log('[DEBUG] üß† status = ' + toPrettyString(status));

                    if (userResponse && typeof userResponse === 'string') {
                        $reactions.answer(userResponse);
                    }
                    $session.messages.push({ role: "assistant", content: userResponse });

                    var result = gerUserByBitrix($session.id_telegram);
                    if (result && result.length > 0) {
                        var bitrix_id = result[0].ID;
                        var leadManagerInstance = new leadManager($context);

                        if (status) {
                            leadManagerInstance.updateLeadFields(bitrix_id, { STATUS_ID: status });
                        }

                        if (data) {
                            var bitrixFields = {};
                            if (data.themes && data.themes.length > 0) {
                                bitrixFields.userThemes = String(data.themes[0].id);
                            }
                            if (data.micro_themes && data.micro_themes.length > 0) {
                                bitrixFields.userMicroThemes = String(data.micro_themes[0].id);
                            }
                            if (data.urgencyLevels && data.urgencyLevels.length > 0) {
                                bitrixFields.userUrgencyLevels = String(data.urgencyLevels[0].id);
                            } else if (data.additional && data.additional.urgency) {
                                var urgencyMap = { "–Ω–∏–∑–∫–∞—è": "106", "—Å—Ä–µ–¥–Ω—è—è": "104", "–≤—ã—Å–æ–∫–∞—è": "102" };
                                var urgencyId = urgencyMap[data.additional.urgency.toLowerCase()];
                                if (urgencyId) bitrixFields.userUrgencyLevels = urgencyId;
                            }
                            if (data.client_name) {
                                bitrixFields.userName = data.client_name;
                            }
                            if (data.client_phone) {
                                bitrixFields.userPhone = data.client_phone;
                            }

                            if (Object.keys(bitrixFields).length > 0) {
                                try {
                                    var updateResult = leadManagerInstance.updateLeadFields(bitrix_id, bitrixFields);
                                    log('[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + toPrettyString(updateResult));

                                    var promt_get_result = prompt.promt_get_result;
                                    var brainRes = askBrain(promt_get_result, $session.messages);

                                    if (brainRes && brainRes.userResponse) {
                                        leadManagerInstance.updateLeadFields(bitrix_id, {
                                            UF_CRM_1750364958: brainRes.userResponse
                                        });
                                        log('[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–æ UF_CRM_1750364958: ' + brainRes.userResponse);
                                    } else {
                                        log('[ERROR] –ù–µ—Ç userResponse: ' + toPrettyString(brainRes));
                                    }
                                } catch (bitrixError) {
                                    log('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ' + toPrettyString(bitrixError));
                                }
                            } else {
                                log('[DEBUG] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ');
                            }
                        }
                    } else {
                        log('[ERROR] –õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ');
                    }

                    break;
                } catch (error) {
                    currentRetry++;
                    log('[ERROR] askBrain –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–ø—ã—Ç–∫–∞ ' + currentRetry + ' –∏–∑ ' + maxRetries + ': ' + toPrettyString(error));
                    if (currentRetry >= maxRetries) {
                        $reactions.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                        return;
                    }
                    log('[DEBUG] –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...');
                    var start = Date.now();
                    while (Date.now() - start < 5000) {}
                }
            }

    state: Stop
        q!: 2
        script:
            $jsapi.stopSession();
        a: –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.

    state: 3
        q!: 3
        script:
            $reactions.answer(JSON.stringify($request));
