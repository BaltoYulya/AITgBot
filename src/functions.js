function getRequestParam() {
    var $ = $jsapi.context()
    return {
        url: $.injector.api,
        token: $.injector.auth
    }
}

/**
 * –ó–∞–º–µ–Ω—è–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {token} –≤ URL —à–∞–±–ª–æ–Ω–µ –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
 * @param {string} urlTemplate - URL —à–∞–±–ª–æ–Ω —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º {token}
 * @param {string} tokenValue - –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
 * @returns {string} URL —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
 */
function replaceTokenInUrl(urlTemplate, tokenValue) {
    return urlTemplate.replace('{token}', tokenValue);
}


// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ arr - –º–∞—Å—Å–∏–≤, –ø—Ä–∏—á–µ–º –Ω–µ –ø—É—Å—Ç–æ–π
function isNotEmptyArray(arr) {
    return _.isArray(arr) && !_.isEmpty(arr);
}


function extractPromts(data) {
    var result = {};

    _.each(data, function (value, key) {
        result[key] = value.promt;
    });

    return JSON.stringify(result, null, 2); // –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ JSON
}

function askBrain(system_prompt, messages) {
    try {
        // "gpt-4.1-nano",
        var url = "http://109.237.98.241:5010/ask";

        var body = {
            system_prompt: system_prompt,
            model: "gpt-4.1",
            messages: messages
        };

        var response = $http.post(url, {
            headers: {
                'Content-Type': 'application/json'
            },
            body: body,
            timeout: 25000  // 25 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç (–º–∞–∫—Å–∏–º—É–º –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
        });
        log('[+++] üß†üß†üß† REQUEST BODY = ' + toPrettyString(body));
        log('[+++] üß†üß†üß† FULL RESPONSE = ' + toPrettyString(response));
        log('[+++] üß†üß†üß† response.data = ' + toPrettyString(response.data));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å HTTP –∑–∞–ø—Ä–æ—Å–∞
        if (!response.isOk || response.error) {
            log('[ERROR] –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: ' + toPrettyString(response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            return {
                error: response.error || "HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω",
                status: response.status || 500
            };
        }

        // –ù–æ–≤—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é
        if (response.data) {
            log('[+++] üß†üß†üß† –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ' + toPrettyString(response.data));
            
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ userResponse, data, status - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if (typeof response.data === 'object' && 
                (response.data.userResponse || response.data.data || response.data.status)) {
                log('[+++] üß†üß†üß† –ù–∞–π–¥–µ–Ω –ø–æ–ª–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏');
                return response.data;
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –æ—à–∏–±–∫–æ–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if (typeof response.data === 'object' && response.data.error) {
                log('[+++] üß†üß†üß† –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                return response.data;
            }
            
            // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            log('[+++] üß†üß†üß† –í–æ–∑–≤—Ä–∞—â–∞–µ–º response.data –∫–∞–∫ –µ—Å—Ç—å');
            return response.data;
        }
        
        // Fallback - –µ—Å–ª–∏ data –ø—É—Å—Ç–∞—è
        log('[+++] üß†üß†üß† response.data –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É');
        return {
            error: "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞",
            status: 500
        };



    } catch (error) {
        return {
            "error": error.message,
            "status": error.status || 500
        };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
 * @returns {Object} –æ—Ç–≤–µ—Ç –æ—Ç API —Å –ø–æ–ª—è–º–∏
 */
function getBitrixUserFields() {

        var param = getRequestParam()
        var url = replaceTokenInUrl(param.url.getBitrixThemes, param.token.bitrix);

        var response = $http.post(url, {
            headers: {
                'Cookie': 'qmb=0.'
            }
        });
        
        

        if (response && response.data && response.data.result) {
            return response.data.result;
        }

        return null;

}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–∏, –º–∏–∫—Ä–æ-—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ë–∏—Ç—Ä–∏–∫—Å24
 * @param {Array} result - –º–∞—Å—Å–∏–≤ –ø–æ–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ë–∏—Ç—Ä–∏–∫—Å24
 * @returns {Object} –æ–±—ä–µ–∫—Ç —Å —Ç–µ–º–∞—Ç–∏–∫–∞–º–∏, –º–∏–∫—Ä–æ-—Ç–µ–º–∞—Ç–∏–∫–∞–º–∏ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é
 */
function extractThemesFromBitrix(result) {
    var themes = [];
    var microThemes = [];
    var urgencyLevels = [];

    try {
        _.each(result, function (field) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–ª–µ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º (enumeration)
            if (field.USER_TYPE_ID === "enumeration" && field.LIST && Array.isArray(field.LIST)) {

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—è –ø–æ FIELD_NAME
                if (field.FIELD_NAME === "UF_CRM_1750364723") {
                    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏
                    _.each(field.LIST, function (item) {
                        themes.push({
                            "id": item.ID,
                            "value": item.VALUE
                        });
                    });
                } else if (field.FIELD_NAME === "UF_CRM_1750364784") {
                    // –ú–∏–∫—Ä–æ-—Ç–µ–º–∞—Ç–∏–∫–∏
                    _.each(field.LIST, function (item) {
                        microThemes.push({
                            "id": item.ID,
                            "value": item.VALUE
                        });
                    });
                } else if (field.FIELD_NAME === "UF_CRM_1753211933") {
                    // –£—Ä–æ–≤–Ω–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
                    _.each(field.LIST, function (item) {
                        urgencyLevels.push({
                            "id": item.ID,
                            "value": item.VALUE
                        });
                    });
                }
            }
        });

        log('[+++] Extracted Themes = ' + toPrettyString(themes));
        log('[+++] Extracted Micro Themes = ' + toPrettyString(microThemes));
        log('[+++] Extracted Urgency Levels = ' + toPrettyString(urgencyLevels));

        return {
            "themes": themes,
            "microThemes": microThemes,
            "urgencyLevels": urgencyLevels
        };

    } catch (error) {
        log('[+++] Error extracting themes = ' + toPrettyString(error));
        return {
            "themes": [],
            "microThemes": [],
            "urgencyLevels": [],
            "error": error.message
        };
    }
}




function getUserByBitrix(id, type) {
    var param = getRequestParam();

    var headers = {
        'Cookie': 'qmb=0.',
        'Content-Type': 'application/x-www-form-urlencoded'
    };

    if (type === 'whatsapp') {
        // –î–ª—è WhatsApp –∏—Å–ø–æ–ª—å–∑—É–µ–º crm.duplicate.findbycomm
        var url = replaceTokenInUrl(param.url.getUserByWhatsapp, param.token.bitrix);
        
        var response = $http.post(url, {
            headers: headers,
            form: {
                'entity_type': 'LEAD',
                'type': 'PHONE',
                'values[0]': id
            }
        });

    } else if (type === 'telegram') {
        // –î–ª—è Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º crm.lead.list
        var url = replaceTokenInUrl(param.url.getUserByTelegram, param.token.bitrix);
        
        // –°–æ–∑–¥–∞–µ–º form –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –µ—Å—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª—é—á–∏
        var formData = 'filter[UF_CRM_TELEGRAMID_WZ]=' + encodeURIComponent(id) + 
                      '&select[]=ID' +
                      '&select[]=TITLE' +
                      '&select[]=UF_CRM_TELEGRAMID_WZ' +
                      '&order[ID]=DESC' +
                      '&start=0';
        
        var response = $http.post(url, {
            headers: headers,
            body: formData
        });
       
    }

    // —É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

    if (type === 'whatsapp' && response.data && response.data.result.LEAD && response.data.result.LEAD.length === 1) {
        return response.data.result.LEAD[0];
    } else if (type === 'telegram' && response.data && response.data.result.length === 1) {
        return response.data.result[0].ID;
    }
    return null;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –æ–±—ä–µ–∫—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç –∏ JSON
 * @param {string} input - –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ JSON –æ–±—ä–µ–∫—Ç–æ–º
 * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ response (—Ç–µ–∫—Å—Ç –±–µ–∑ JSON) –∏ json (–∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç)
 */
function parseResponseWithJson(input) {
    try {
        // –ò—â–µ–º –Ω–∞—á–∞–ª–æ JSON –æ–±—ä–µ–∫—Ç–∞
        var jsonStart = input.indexOf('{');
        
        if (jsonStart === -1) {
            // JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ response
            return {
                response: input.trim(),
                json: null
            };
        }
        
        // –ò—â–µ–º –∫–æ–Ω–µ—Ü JSON –æ–±—ä–µ–∫—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        var braceCount = 0;
        var jsonEnd = -1;
        
        for (var i = jsonStart; i < input.length; i++) {
            if (input[i] === '{') {
                braceCount++;
            } else if (input[i] === '}') {
                braceCount--;
                if (braceCount === 0) {
                    jsonEnd = i;
                    break;
                }
            }
        }
        
        if (jsonEnd === -1) {
            // –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Å–∏–º–≤–æ–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            return {
                response: input.trim(),
                json: null
            };
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON —Å—Ç—Ä–æ–∫—É
        var jsonString = input.substring(jsonStart, jsonEnd + 1);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ JSON
        var beforeJson = input.substring(0, jsonStart).trim();
        var afterJson = input.substring(jsonEnd + 1).trim();
        var responseText = (beforeJson + (beforeJson && afterJson ? '\n\n' : '') + afterJson).trim();
        
        // –ü–∞—Ä—Å–∏–º JSON
        var parsedJson;
        try {
            parsedJson = JSON.parse(jsonString);
        } catch (parseError) {
            log('[+++] Error parsing JSON = ' + toPrettyString(parseError));
            return {
                response: input.trim(),
                json: null,
                error: 'Invalid JSON format'
            };
        }
        
        return {
            response: responseText,
            json: parsedJson
        };
        
    } catch (error) {
        log('[+++] Error in parseResponseWithJson = ' + toPrettyString(error));
        return {
            response: input.trim(),
            json: null,
            error: error.message
        };
    }
}





function getSystemPrompt(channel) {
   
    // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –∏–Ω–∞—á–∞–µ openAI –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫
    var themes = getBitrixUserFields(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–∞—Ç–∏–∫—É –∏ –º–∏–∫—Ä–æ—Ç–µ–º–∞—Ç–∏–∫—É, –¥–æ–±–º–∞–ª–≤—è–µ–º –µ—ë –∫ –ø—Ä–æ–º—Ç—É
    var themes_text = extractThemesFromBitrix(themes);
    var channelPrompt = channel === 'telegram' ? prompt.prompt_tg : prompt.prompt_whatsapp;
    return channelPrompt + "\n\nüìã –î–û–°–¢–£–ü–ù–´–ï –¢–ï–ú–ê–¢–ò–ö–ò –ò –ú–ò–ö–†–û–¢–ï–ú–ê–¢–ò–ö–ò:\n" + themes_text + "\n\n–°—Ç–∞—Ç—É—Å—ã:\n" + prompt.status;

}